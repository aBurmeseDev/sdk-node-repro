name: Create CloudFormation Stack

on:
  workflow_dispatch:

jobs:

  create-stack:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['>=16.11.0', '<16.11.0', '18.20.5']

    steps:
    - name: Print version details
      run: |
        echo "Ubuntu version:"
        lsb_release -a
        echo "-----------------"

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}     

    - name: Print Node.js version
      run: node --version

    - name: Print npm version
      run: npm --version
      
    - name: Print AWS SDK version
      run: |
        npm install @aws-sdk/client-cloudformation
        node -e 'console.log(require("@aws-sdk/client-cloudformation/package.json").version)'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Create CloudFormation Stack
      run: |
        npm install @aws-sdk/client-cloudformation
        node --loader=esm -e '
          import { CloudFormationClient, CreateStackCommand } from "@aws-sdk/client-cloudformation";

          const client = new CloudFormationClient({ region: process.env.AWS_REGION });

          const params = {
            StackName: `my-stack-node-${process.version.replace(/\./g, "-")}`,
            TemplateBody: JSON.stringify({
              Resources: {
                MyBucket: {
                  Type: "AWS::S3::Bucket",
                  Properties: {
                    BucketName: "sdk-node-repro"
                  }
                }
              }
            }),
            Capabilities: ["CAPABILITY_NAMED_IAM"]
          };

          const command = new CreateStackCommand(params);
          const response = await client.send(command);
          console.log(response);
        '
      env:
        AWS_REGION: us-west-2